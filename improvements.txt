
# Problems:
# If the professor does not exist on RMP, he is not shown on any list
# There is no testing for incorrect inputs (CSSSS instead of CS3345)
# Parallel thread execution needs to be implemented for query's & RMP
# APP.PY file is too large and needs to be broken down into smaller files
# No sorting buttons.
# Use coursebook-master-api?

# Use ThreadPoolExecutor to run the requests in parallel
#         with ThreadPoolExecutor(max_workers=4) as executor:
#             # Submit all tasks to the executor
#             future_to_professor = {executor.submit(get_professor_info, professor): professor for professor in professors}
            
#             # Collect the results as they complete
#             for future in as_completed(future_to_professor):
#                 try:
#                     professor_info = future.result()
#                     all_professor_info.append(professor_info)
#                 except Exception as e:
#                     print(f"Exception occurred for professor {future_to_professor[future]}: {e}")


#User enters class in to search
#Verify if course is valid and exists in the coursebook
#Retrieve the list of professors from coursebook
#Retrieve RMP ratings for each professor
#Retrieve UTDGrades stats for professor (Average %, %A, %B, %C, %D, %F)
#Sort results (%A first, then the rating from RMP)
#Display the results

#Later versions:
# Keep track of user's classes and exclude classes that overlap with previously entered classes
# Directly enroll the users in the classes
# Filter classes by open / close / waitlist
# Replace time.sleep() with a better coded version

#Efficiency:
# Use a dictionary to store the professors and their ratings
# Update the table directly instead of reading into placeholder that gets returned from function
# Directly seat the coursebok info in a data base (How would you update it regularly?)
# Make the code not use a visual GUI and instead use a headless browser